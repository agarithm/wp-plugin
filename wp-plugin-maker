#!/usr/bin/php
<?php
require_once(dirname(__FILE__)."/plugin-name/includes/Agarithm/Agarithm.php");

use Agarithm as A;

function canonical($name){
	$name = mb_strtolower($name);
	$name = A\Strings::ReplaceAll('-',' ',$name);
	$name = A\Strings::ReplaceAll('_',' ',$name);
	$name = A\Strings::ReplaceAll('  ',' ',$name);
	return $name;
}

function snake($name){
	$name = A\Strings::ReplaceAll(' ','_',$name);
	return $name;
}

function kebab($name){
	$name = A\Strings::ReplaceAll(' ','-',$name);
	return $name;
}

function pascal($name){
	$name = ucwords($name," -_");
	return $name;
}

function screaming($name){
	$name = mb_strtoupper($name);
	return $name;
}


start:
$new_name = '';
echo( "================================================".PHP_EOL);
echo( "================================================".PHP_EOL);
echo( "================================================".PHP_EOL);
while(empty($new_name)){
	echo( "Enter the New Plugin Name:".PHP_EOL);
	$new_name = trim(readline());
}

//Canonicalize the plugin name
$old_name = canonical('plugin-name');
$new_name = canonical($new_name);

get_path:
$path='';
while(empty($path)){
	echo( "Enter the New Plugin location:".PHP_EOL);
	$path = readline();
}
$path = realpath ($path);
if(! A\Strings::Contains($path,'wp-content') || !A\Strings::EndsWith($path,'plugins')  ){
	echo( "\nERROR: $path is not located in a wp-content plugin folder\n".PHP_EOL);
	goto get_path;
}


$here = realpath (dirname(__FILE__));
$refactor  = "$here/refactor";
$source_dir = $here.'/'.kebab(canonical($old_name));
$target_dir = $path.'/'.kebab(canonical($new_name));
if(file_exists($target_dir)){
	echo( "\nERROR: $target_dir already exists\n".PHP_EOL);
	goto start;

}

confirm:

	echo( "\n\n CONFIRMATION:".PHP_EOL);
	echo( "\t New Plugin Name = ".pascal($new_name).PHP_EOL);
	echo( "\t New Plugin Slug = ".kebab($new_name).PHP_EOL);
	echo( "\t New Location    = ".$target_dir.PHP_EOL);
	echo( "\n\n".PHP_EOL);
	echo( "Is this Correct? (yes/no)".PHP_EOL);
$confirm = readline();
switch(mb_strtolower(trim($confirm))){
case "yes":
	goto doit;
	break;
case "no":
	goto start;
	break;
default:
	goto confirm;
}


doit:
`cp -r $source_dir $target_dir`;
if(chdir($target_dir)){
	echo "\n\n Plugin $new_name created...".PHP_EOL;
	echo " Refactoring Now...".PHP_EOL;
	foreach([' ',''] as $suffix){
		//plain
		$search = (canonical($old_name.$suffix));
		$replace = (canonical($new_name.$suffix));
		`$refactor '$search' '$replace'`;

		//snake
		$search = snake(canonical($old_name.$suffix));
		$replace = snake(canonical($new_name.$suffix));
		`$refactor '$search' '$replace'`;

		//kebab
		$search = kebab(canonical($old_name.$suffix));
		$replace = kebab(canonical($new_name.$suffix));
		`$refactor '$search' '$replace'`;

		//pascal
		$search = pascal(canonical($old_name.$suffix));
		$replace = pascal(canonical($new_name.$suffix));
		`$refactor '$search' '$replace'`;

		//screaming
		$search = screaming(canonical($old_name.$suffix));
		$replace = screaming(canonical($new_name.$suffix));
		`$refactor '$search' '$replace'`;

		//pascal kebab
		$search = pascal(kebab(canonical($old_name.$suffix)));
		$replace = pascal(kebab(canonical($new_name.$suffix)));
		`$refactor '$search' '$replace'`;

		//screaming kebab
		$search = screaming(kebab(canonical($old_name.$suffix)));
		$replace = screaming(kebab(canonical($new_name.$suffix)));
		`$refactor '$search' '$replace'`;

		//pascal snake
		$search = pascal(snake(canonical($old_name.$suffix)));
		$replace = pascal(snake(canonical($new_name.$suffix)));
		`$refactor '$search' '$replace'`;

		//screaming snake
		$search = screaming(snake(canonical($old_name.$suffix)));
		$replace = screaming(snake(canonical($new_name.$suffix)));
		`$refactor '$search' '$replace'`;

	}

	echo "\n\n Plugin $new_name is ready to be activated.\n Be sure to check the ownership permissions for the new plugin folder. \n".PHP_EOL;

}



